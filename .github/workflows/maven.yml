name: üöÄ Full CI/CD Pipeline (Build, Test, Deploy)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  ci-cd-pipeline:
    runs-on: ubuntu-latest

    steps:
    # PHASE 1 - PR√âPARATION
    - name: üîç Checkout Code
      uses: actions/checkout@v4

    # PHASE 2 - BUILD & TEST (CI)
    - name: ‚òï Setup Java 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven # Optimisation du cache

    - name: üõ†Ô∏è Build & Test
      run: mvn -B verify # Au lieu de package pour lancer les tests
      env:
        MAVEN_OPTS: -Dmaven.repo.local=.m2/repository # Cache local

    # PHASE 3 - LIVRAISON (CD)
    if: github.ref == 'refs/heads/main' # Ne d√©ploie que sur main
    needs: [ci-cd-pipeline] # Attendre la phase CI
    
    - name: üê≥ Build/Push Docker Image
      env:
        DOCKER_TAG: ${{ secrets.DOCKER_USERNAME }}/springboot-app:${{ github.sha }}
      run: |
        docker build -t $DOCKER_TAG .
        echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
        docker push $DOCKER_TAG

    - name: üöÄ Trigger Render Deployment
      run: |
        echo "D√©clenchement du d√©ploiement..."
        RESPONSE=$(curl -s -o response.log -w "%{http_code}" -X POST ${{ secrets.RENDER_DEPLOY_HOOK_URL }})
        
        if [ $RESPONSE -eq 200 ]; then
          echo "‚úÖ D√©ploiement lanc√© avec succ√®s !"
          cat response.log
        else
          echo "‚ùå Erreur: HTTP $RESPONSE"
          exit 1
        fi

    # PHASE 4 - V√âRIFICATION (Optionnel mais d√©mo-friendly)
    - name: üîé Check Render Deployment
      run: |
        sleep 60 # Attendre le d√©ploiement
        curl -s https://votre-service.onrender.com/actuator/health | jq '.status' 
        # Requiert jq d'install√© ou utilise grep '"status":"UP"'